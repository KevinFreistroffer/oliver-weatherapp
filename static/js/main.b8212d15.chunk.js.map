{"version":3,"sources":["routes/Home/index.js","routes/Search/Weather.js","routes/Search/Form.js","actions/weather.js","routes/Search/index.js","components/Header.js","reducers/weather.js","reducers/index.js","App.js","serviceWorker.ts","index.js"],"names":["Home","props","react_default","a","createElement","id","className","styles","onClick","route","history","push","concat","displayName","Weather","_ref","icon","desc","temp","src","Form","term","handleOnChange","handleOnSubmit","isSearching","data","error","Object","objectWithoutProperties","useEffect","console","log","react","name","htmlFor","type","value","onChange","placeholder","connect","state","weather","searchSuccess","payload","searchFailure","Search","_Component","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","persist","setState","prevState","target","beginSearch","search","inherits","createClass","key","Search_Form","Search_Weather","main","Component","objectSpread","dispatch","asyncToGenerator","regenerator_default","mark","_callee","getState","_ref2","status","wrap","_context","prev","next","axios","get","sent","abrupt","stop","_x","_x2","apply","arguments","Header","title","initialState","combineReducers","length","undefined","action","store","createStore","rootReducer","applyMiddleware","thunk","App","es","components_Header","react_router_dom","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8212d15.chunk.js","sourcesContent":["/* \r\n\t!Documentation\r\n\t--------------\r\n\r\n\r\n\r\n\tThis is the Home route component. It's a functional component instead of a class component.\r\n\tI decided to use a functional component because this component is very simple and\r\n\tonly needs to mostly render HTML and not manage it's own state or using any common\r\n\tlifecycle hooks.\r\n\r\n\tIt provides the first route the application shows when it starts.\r\n\tA title is set welcoming the user to the application and a button is created to direct the \r\n\tuser to the Search route, to begin starting the application. \r\n\r\n\tThe styling consists of CSS3 styles including CSS3 border-radius to provided nice rounded\r\n\tcorners, and the title and button are centered using CSS3 flexbox.\r\n\r\n\tI set up routing in this application using React-Router-DOM. This root component uses\r\n\tthe BrowserRouter component to allow the rendering of different route components. It has\r\n\t2 routes, Home and Search that routes to those 2 components. I imported those created\r\n\tcomponents into this root component and they are mounted and used when the route matches\r\n\tthe given URL.\r\n\r\n*/\r\n\r\nimport React, { PropTypes } from 'react';\r\nimport * as styles from './styles.scss';\r\n\r\nconst Home = (props) => {\r\n\r\n\tfunction routeTo(route) {\r\n\t\tprops.history.push(`/${route}`)\r\n\t}\r\n    return (\r\n      <div id=\"home\" className=\"view\" styles={styles}>\r\n      \t<h1>Welcome to my <br /> Weather App</h1>\r\n      \t<button onClick={() => routeTo('search')}>Begin Searching</button>\r\n      </div>  \r\n    );\r\n};\r\n\r\nHome.displayName = 'Home';\r\n\r\nexport default Home;\r\n","import React, { PropTypes } from 'react';\r\n\r\n\r\n\r\nconst Weather = ({ icon, desc, temp }) => {\r\n    return (\r\n        <div className=\"weather\">\r\n        \t<img src={icon} />\r\n        \t<div className=\"temp-desc-container\">\r\n        \t\t<p className=\"desc\">{desc}</p>\r\n        \t\t<p className=\"temp\">{temp}</p>\r\n        \t</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nWeather.displayName = 'Weather';\r\n\r\nWeather.propTypes = {\r\n    // icon: PropTypes.string,\r\n    // desc: PropTypes.string,\r\n    // temp: PropTypes.number\r\n};\r\n\r\nexport default Weather;\r\n","import React, { useEffect, Fragment, PropTypes } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Weather from './Weather';\r\n/*  */\r\nconst Form = ({ term, handleOnChange, handleOnSubmit, isSearching, data, error, ...props }) => {\r\n    useEffect(() => {\r\n        console.log(data, error);\r\n    });\r\n    return (\r\n    \t<Fragment>\r\n            <form name=\"search-form\">\r\n                <label htmlFor=\"search\">Search by a city\r\n                    <input \r\n                        id=\"search\"\r\n                        type=\"text\" \r\n                        name=\"search-term\" \r\n                        value={term}  \r\n                        onChange={handleOnChange}\r\n                        placeholder=\"Search by city\" \r\n                    />\r\n                </label>\r\n                <button type=\"button\" onClick={handleOnSubmit}>{isSearching ? <div>Loading...</div> : <div>Find the weather</div>}</button>\r\n            </form>\r\n    \t</Fragment>\r\n    );\r\n};\r\n\r\nForm.displayName = 'Form';\r\n\r\nForm.propTypes = {\r\n\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n\r\n    console.log(state);\r\n    return {\r\n        isSearching: state.weather.isSearching,\r\n        data: state.weather.data,\r\n        error: state.weather.error,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Form);\r\n","/* \r\n\t!Documentation\r\n\t--------------\r\n\t\r\n\tThese are the actions for the weather reducer. These actions allow the Redux state \r\n\tof beginning to search, searching, a successfull search response or a failure search\r\n\tresponse to be created or used, so you know what the state of the Redux store change\r\n\tis going to be.\r\n\r\n\tThe actions as mentioned are:\r\n\r\n\tBEGIN_SEARCH - sets isSearching to true, to display to the app\r\n\t a loading icon, text or anything to know that the app is searching.\r\n\tSEARCH\r\n\tSEARCH_SUCCESS - sets isSearching to false to display to the app\r\n\t that that search is completed. Stores the successfull response in\r\n\t the data property\r\n\tSEARCH_FAILURE - sets isSearching to false to display to the app\r\n\t that the search is completed. Stores the error response in the\r\n\t error property\r\n\r\n\t axios is imported to perform the HTTP request.\r\n*/\r\n\r\n\r\nimport axios from 'axios';\r\n\r\nexport const beginSearch = () => {\r\n\treturn {\r\n\t\ttype: 'BEGIN_SEARCH',\r\n\t}\r\n}\r\n\r\nexport const search = (term) => {\r\n\treturn async function(dispatch, getState) {\r\n\t\tconst { status, data } = await axios.get(`http://api.openweathermap.org/data/2.5/weather?units=imperial&q=${term}&appid=b95eb244ea12e25f51b8c6b56e22eec3`)\r\n\r\n\t\tif (status === 200) {\r\n\t\t\tdispatch(searchSuccess(data));\r\n\t\t} else {\r\n\t\t\tdispatch(searchFailure()); \r\n\t\t}\r\n\r\n\t\treturn dispatch({\r\n\t\t\ttype: 'SEARCH'\r\n\t\t});\r\n\t};\r\n}\r\n\r\n\r\nexport const searchSuccess = (data) => {\r\n\treturn {\r\n\t\ttype: `SEARCH_SUCCESS`,\r\n\t\tpayload: {\r\n\t\t\tdata\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const searchFailure = (error) => {\r\n\treturn {\r\n\t\ttype: `SEARCH_FAILURE`,\r\n\t\tpayload: {\r\n\t\t\terror: 'An error occured fetching the weather'\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","/* \r\n\t!Documentation\r\n\t--------------\r\n\r\n\r\n\r\n\tThis is the Search route component. It's a class component instead of a functional component.\r\n\tI decided to use a class component because this component is the container component\r\n\tfor a few other components and it needs to manage state within in and pass it to child\r\n\tcomponents as props.\r\n\r\n\tIt provides a view of 2 other components, the Form component to begin searching for the \r\n\tweather in a given searched for city, and a Weather component, on successful response\r\n\tfrom the server.\r\n\r\n\tThe Form component consists of a text input and a button. The input stores the typed\r\n\tin value, by saving the value of what is typed in through the onChange event, where \r\n\tevery change within the input, calls setState to store that new value within the\r\n\tSearch components state. That new state.text value is then used to search.\r\n\tThe button is of type button so it does not automatically submit the form its within. \r\n\tOn a click event, the buttonbegins a Redux action of beginSearch(), and then following \r\n\tit with search(). It searches with the term available in this.state.term; \r\n\r\n\tThis Search component can access the searches response whether it be succesful or an error \r\n\tby connecting to the Redux store, and accessing the data property, or the error property,\r\n\tusing the connect() method available through react-redux. It connects the component,\r\n\tto the Redux store state, provided access to the actions required to alter the Redux store\r\n\tstate.\t\r\n*/\r\n\r\nimport React, {Component} from 'react';\r\nimport { PropTypes } from 'prop-types';\r\nimport Form from './Form';\r\nimport Weather from './Weather';\r\nimport { connect } from 'react-redux';\r\nimport { beginSearch, search, searchSuccess, searchFailure } from '../../actions/weather';\r\nimport * as styles from './styles.scss';\r\n\r\nexport class Search extends Component {\r\n\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\t\r\n\t\tthis.state = {\r\n\t\t\tterm: ''\r\n\t\t}\r\n\t}\r\n\r\n\r\n\thandleOnChange = event => {\r\n\t\tevent.persist();\r\n\t\tthis.setState(prevState => {\r\n\t\t\treturn {\r\n\t\t\t\tterm: event.target.value\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\thandleOnSubmit = () => {\r\n\t\tthis.props.beginSearch();\r\n\t\tthis.props.search(this.state.term);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t        <div id=\"search\" className=\"view\" styles={styles}>\r\n\t        \t<h1>Search</h1>\r\n\t        \t<Form \r\n\t        \t\tterm={this.state.term} \r\n\t        \t\thandleOnChange={this.handleOnChange} \r\n\t        \t\thandleOnSubmit={this.handleOnSubmit} \r\n\t        \t/>\r\n\t        \t{ this.props.data && (\r\n                <div className=\"todays-weather\">\r\n                    <h1>Todays Weather</h1>\r\n                    <Weather icon={`http:\\/\\/openweathermap.org/img/w/${this.props.data.weather[0].icon}.png`} temp={this.props.data.main.temp} desc={this.props.data.weather[0].main} />\r\n                </div>)\r\n            }`\r\n\r\n\t        </div>\r\n\t    );\r\n\t}\r\n};\r\n\r\nSearch.displayName = 'Search';\r\n\r\nSearch.propTypes = {\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\t...state,\r\n\t\tdata: state.weather.data\r\n\t}\r\n};\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tbeginSearch: () => dispatch(beginSearch()),\r\n\t\tsearch: term => dispatch(search(term)),\r\n\t\tsearchSuccess: () => dispatch(searchSuccess()),\r\n\t\tsearchFailure: () => dispatch(searchFailure()),\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\r\n","import React, { PropTypes } from 'react';\r\n\r\nconst Header = ({ title }) => {\r\n    return (\r\n    \t<header>{title}</header> \r\n    );\r\n};\r\n\r\nHeader.displayName = 'Header';\r\n\r\n// Header.propTypes = {\r\n//     title: PropTypes.string,\r\n// };\r\n\r\nexport default Header;\r\n","const initialState = {\r\n\tisSearching: false,\r\n\tdata: null,\r\n\terror: null\r\n}\r\n\r\nexport const weather = (state = initialState, action) => {\r\n\r\n\tconsole.log(action);\r\n\tswitch(action.type) {\r\n\t\tcase 'BEGIN_SEARCH':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisSearching: true\r\n\t\t\t}\r\n\t\tcase 'SEARCH':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t}\r\n\t\tcase 'SEARCH_SUCCESS':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisSearching: false,\r\n\t\t\t\tdata: action.payload.data\r\n\t\t\t}\r\n\t\tcase 'SEARCH_FAILURE':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisSearching: false,\r\n\t\t\t\terror: action.payload.error\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn { ...state }\r\n\t}\r\n}","/* \r\n\t!Documentation\r\n\t--------------\r\n\t\r\n\tThis combines all or any reducers available to combine all the state for the Redux store.\r\n\tIt's imported into the Provider component when creating the store for Redux.\r\n*/\r\n\r\n\r\nimport { combineReducers } from 'redux';\r\nimport {weather} from './weather';\r\n\r\nexport default combineReducers({ weather  })","/* \n\t!Documentation\n\t--------------\n\n\n\n\tThis is the root component. It provides the store needed for the redux store to be accessible\n\tin the application.\n\n\tI set up routing in this application using React-Router-DOM. This root component uses\n\tthe BrowserRouter component to allow the rendering of different route components. It has\n\t2 routes, Home and Search that routes to those 2 components. I imported those created\n\tcomponents into this root component and they are mounted and used when the route matches\n\tthe given URL.\n\n\t\n*/\n\nimport React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport Home from './routes/Home';\nimport Search from './routes/Search';\nimport Header from './components/Header';\nimport rootReducer from './reducers';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n  \nconst App = () => {\n  return (\n  \t<Provider store={store}> \n\t  \t<div className=\"App\">\n\t      <Header title='Weather App'></Header>\n\t      <BrowserRouter>\n\t        <Route path='/' exact component={Home} /> \n\t        <Route path='/search' component={Search} /> \n\t      </BrowserRouter>\n\t    </div>\n  \t</Provider>\n  );  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'; \nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}